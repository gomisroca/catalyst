// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?  @unique
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Share {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?  @unique
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Report {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?  @unique
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Hidden {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?  @unique
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model User {
  id         String     @id @default(uuid())
  google     Google?
  googleId   String?
  facebook   Facebook?
  facebookId String?
  discord    Discord?
  discordId  String?
  email      String     @unique
  password   String?
  username   String
  nickname   String?
  avatar     String?
  role       Role       @default(USER)
  posts      Post[]     @relation("author")
  branches   Branch[]   @relation("author")
  projects   Project[]
  likes      Like[]
  shares     Share[]
  bookmarks  Bookmark[]
  reports    Report[]
  hidden     Hidden[]
}

model Google {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Facebook {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Discord {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

enum Role {
  USER
  ADMIN
}

model Permissions {
  id               String   @id @default(uuid())
  private          Boolean  @default(false)
  allowUsers       String[]
  allowCollaborate Boolean  @default(true)
  allowBranch      Boolean  @default(true)
  allowShare       Boolean  @default(true)
  branch           Branch?  @relation(fields: [branchId], references: [id])
  branchId         String?  @unique
  project          Project? @relation(fields: [projectId], references: [id])
  projectId        String?  @unique
}

model Post {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation("author", fields: [authorId], references: [id])
  authorId  String
  content   String
  media     String[]
  branch    Branch     @relation(fields: [branchId], references: [id])
  branchId  String
  likes     Like[]
  shares    Share[]
  bookmarks Bookmark[]
  reports   Report[]
  hidden    Hidden[]
}

model Branch {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  author         User         @relation("author", fields: [authorId], references: [id])
  authorId       String
  description    String
  posts          Post[]
  default        Boolean      @default(false)
  parentBranch   Branch?      @relation("ParentChildrenBranch", fields: [parentBranchId], references: [id])
  parentBranchId String?
  childBranches  Branch[]     @relation("ParentChildrenBranch")
  permissions    Permissions?
  activity       Int          @default(0)
  popularity     Int          @default(0)
  project        Project      @relation(fields: [projectId], references: [id])
  projectId      String
  name           String
  likes          Like[]
  shares         Share[]
  bookmarks      Bookmark[]
  reports        Report[]
  hidden         Hidden[]
}

model Project {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  name        String
  description String
  avatar      String?
  branches    Branch[]
  permissions Permissions?
}
