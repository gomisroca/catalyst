// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  google     Google?
  googleId   String?
  facebook   Facebook?
  facebookId String?
  discord    Discord?
  discordId  String?
  email      String    @unique
  password   String?
  username   String
  nickname   String?
  avatar     String?
  role       Role      @default(USER)
  posts      Post[]
  branches   Branch[]
  projects   Project[]
}

model Google {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Facebook {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Discord {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

enum Role {
  USER
  ADMIN
}

model Interactions {
  id           String   @id @default(uuid())
  branchedBy   String[]
  likedBy      String[]
  sharedBy     String[]
  bookmarkedBy String[]
  reportedBy   String[]
  hiddenBy     String[]
  post         Post?    @relation(fields: [postId], references: [id])
  postId       String?  @unique
  branch       Branch?  @relation(fields: [branchId], references: [id])
  branchId     String?  @unique
}

model Permissions {
  id               String   @id @default(uuid())
  private          Boolean  @default(false)
  allowUsers       String[]
  allowCollaborate Boolean  @default(true)
  allowBranch      Boolean  @default(true)
  allowShare       Boolean  @default(true)
  branch           Branch   @relation(fields: [branchId], references: [id])
  branchId         String   @unique
}

model Post {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User          @relation(fields: [authorId], references: [id])
  authorId     String
  content      String
  media        String[]
  interactions Interactions?
  branch       Branch        @relation(fields: [branchId], references: [id])
  branchId     String
}

model Branch {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  description    String
  posts          Post[]
  default        Boolean       @default(false)
  parentBranch   Branch?       @relation("ParentChildrenBranch", fields: [parentBranchId], references: [id])
  parentBranchId String?
  childBranches  Branch[]      @relation("ParentChildrenBranch")
  permissions    Permissions?
  interactions   Interactions?
  activity       Int           @default(0)
  popularity     Int           @default(0)
  project        Project       @relation(fields: [projectId], references: [id])
  projectId      String
  name           String
}

model Project {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  name        String
  description String
  avatar      String?
  branches    Branch[]
}
