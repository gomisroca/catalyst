// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum InteractionType {
  LIKE
  SHARE
  BOOKMARK
  REPORT
  HIDE
}

model PostInteraction {
  type      InteractionType
  createdAt DateTime        @default(now())
  post      Post            @relation(fields: [postId], references: [id])
  postId    String
  user      User            @relation(fields: [userId], references: [id])
  userId    String

  @@id(name: "interactionId", [userId, postId, type])
}

model BranchInteraction {
  type      InteractionType
  createdAt DateTime        @default(now())
  branch    Branch          @relation(fields: [branchId], references: [id])
  branchId  String
  user      User            @relation(fields: [userId], references: [id])
  userId    String

  @@id(name: "interactionId", [userId, branchId, type])
}

model User {
  id                 String              @id @default(uuid())
  google             Google?
  googleId           String?
  facebook           Facebook?
  facebookId         String?
  discord            Discord?
  discordId          String?
  email              String              @unique
  username           String
  nickname           String?
  avatar             String?
  role               Role                @default(USER)
  posts              Post[]              @relation("author")
  branches           Branch[]            @relation("author")
  projects           Project[]
  postInteractions   PostInteraction[]
  branchInteractions BranchInteraction[]
  followedBy         String[]
}

model Google {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Facebook {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

model Discord {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  accessToken  String
  refreshToken String?
}

enum Role {
  USER
  ADMIN
}

model Permissions {
  id               String   @id @default(uuid())
  private          Boolean  @default(false)
  allowedUsers     String[]
  allowCollaborate Boolean  @default(true)
  allowBranch      Boolean  @default(true)
  allowShare       Boolean  @default(true)
  branch           Branch?  @relation(fields: [branchId], references: [id])
  branchId         String?  @unique
  project          Project? @relation(fields: [projectId], references: [id])
  projectId        String?  @unique
}

model Post {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  author       User              @relation("author", fields: [authorId], references: [id])
  authorId     String
  content      String
  media        String[]
  branch       Branch            @relation(fields: [branchId], references: [id])
  branchId     String
  interactions PostInteraction[]
}

model Branch {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  author             User                @relation("author", fields: [authorId], references: [id])
  authorId           String
  description        String
  posts              Post[]
  default            Boolean             @default(false)
  parentBranch       Branch?             @relation("ParentChildrenBranch", fields: [parentBranchId], references: [id])
  parentBranchId     String?
  childBranches      Branch[]            @relation("ParentChildrenBranch")
  permissions        Permissions?
  activity           Int                 @default(0)
  popularity         Int                 @default(0)
  trendingActivity   Boolean             @default(false)
  trendingPopularity Boolean             @default(false)
  project            Project             @relation(fields: [projectId], references: [id])
  projectId          String
  name               String
  interactions       BranchInteraction[]
}

model Project {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  author             User         @relation(fields: [authorId], references: [id])
  authorId           String
  name               String
  description        String
  avatar             String?
  branches           Branch[]
  permissions        Permissions?
  activity           Int          @default(0)
  popularity         Int          @default(0)
  trendingActivity   Boolean      @default(false)
  trendingPopularity Boolean      @default(false)
}
